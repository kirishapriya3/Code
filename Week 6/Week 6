1)Given an array, arr of positive integers. Find the third largest element in it. Return -1 if the third largest element is not found.
Examples:
Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The third largest element in the array [2, 4, 1, 3, 5] is 3.
Input: arr[] = [10, 2]
Output: -1
Explanation: There are less than three elements in the array, so the third largest element cannot be determined.
Input: arr[] = [5, 5, 5]
Output: 5
Explanation: In the array [5, 5, 5], the third largest element can be considered 5, as there are no other distinct elements. WITH DUPLICATES
CODE:
class Solution {
    int thirdLargest(int arr[]) {
        if(arr.length<3){
            return -1;
        }
        int first=Integer.MIN_VALUE;
        int second=Integer.MIN_VALUE;
        int third=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            int num=arr[i];
            if(num>first){
                third=second;
                second=first;
                first=num;
            }
            else if(num>second ){
                third=second;
                second=num; }
            else if(num>third ){
                third=num;
            }}
        return third;}}
2)Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:
Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
CODE:
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
         int i =m-1;
         int j=n-1;
         int k=m+n-1;
         while(i>=0 && j>=0){
            if(nums1[i]>nums2[j]){
                nums1[k--]=nums1[i--];
            }
            else{
                nums1[k--]=nums2[j--];
            }
         }
     while(j>=0){
        nums1[k--]=nums2[j--];
     }
    }
}
3)Sort 0s, 1s and 2s
Difficulty: EasyAccuracy: 50.58%Submissions: 741K+Points: 2
Given an array arr[] containing only 0s, 1s, and 2s. Sort the array in ascending order.
Input: arr[] = [0, 1, 2, 0, 1, 2]
Output: [0, 0, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.
CODE:
public void sort012(int[] arr) {
       int left=0;
       int mid=0;
       int right=arr.length-1;
       while(mid<=right){
           if(arr[mid]==0){
               //swap
             int temp=arr[left];
             arr[left]=arr[mid];
             arr[mid]=temp;
              left++;
             mid++; }
           else if(arr[mid]==1){
               mid++;}
           else if(arr[mid]==2){
               //swap
               int temp=arr[right];
               arr[right]=arr[mid];
               arr[mid]=temp;
               right--;
           } }}
